{
  "collection": {
    "_": {
      "postman_id": "f3e69c24-2f73-4435-bebc-a4cd5b2f1fc1",
      "exporter_id": "42859232"
    },
    "item": [
      {
        "id": "db451fc2-004b-4606-8584-7f135f2b41de",
        "name": "Get All Todo Entries",
        "item": [
          {
            "id": "5e6f5f05-c6b8-49f2-b1d6-546e199f9ff9",
            "name": "Get All Todo Entries",
            "request": {
              "url": {
                "path": [
                  "index.php"
                ],
                "host": [
                  "{{BaseURL}}"
                ],
                "query": [
                  {
                    "key": "",
                    "value": ""
                  },
                  {
                    "key": "",
                    "value": "2"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4adfb1f4-705d-4ee7-b346-341edcf8ed12",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code should be 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "pm.test(\"Status code name should have OK string\", function () {\r",
                    "    pm.response.to.have.status(\"OK\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "0135b1a8-d771-43f7-b191-23faf76247cf"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "95c15c79-3a8d-44c0-9abf-1ba992c1ed35",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "47f87c81-5232-4f92-b6e6-50735bb37130"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "5471475b-65c0-4af3-8bb7-e93e5b811ab6",
        "name": "Get All Entries",
        "item": [
          {
            "id": "16be725b-e62b-4b91-adec-08868cb5c896",
            "name": "Get All Entries",
            "request": {
              "description": {
                "content": "https://demo.fusio-project.org/index.php/",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "index.php",
                  ""
                ],
                "host": [
                  "{{BaseURL}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Fixed syntax and semantic errors\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "//pm.test(\"Body is correct\", function () {\r",
                    "  //  pm.response.to.have.body(\"response_body_string\");\r",
                    "//});\r",
                    "pm.test(\"Status code should be 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "pm.test(\"confirm that title is Fusio\", function () {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                    "});\r",
                    "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                    "});\r",
                    "pm.test(\"Status code name should have OK string\", function () {\r",
                    "    pm.response.to.have.status(\"OK\");\r",
                    "});\r",
                    "pm.test(\"categories should include backend\", function () {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                    "});\r",
                    "\r",
                    "pm.test(\"categories should match predefined list\", function () {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                    "});\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "db2d3eda-e115-42c0-810a-fb6119861f7c",
        "name": "Get entry per ID",
        "item": [
          {
            "id": "c69b9266-358b-4664-a448-7ba8c91aee01",
            "name": "Get entry per ID - Valid ID",
            "request": {
              "description": {
                "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "index.php"
                ],
                "host": [
                  "{{BaseURL}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5f43245e-46ed-4125-972f-318924ecfd0a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});"
                  ],
                  "_lastExecutionId": "d5c768af-28af-40d3-8a8f-ff3c88e7b86f"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "d4253d8c-3df4-47eb-9a65-3de639e32f57",
            "name": "Get entry per ID - Invalid ID(params not using TODO ID)",
            "request": {
              "description": {
                "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{BaseURL}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "36de4fdc-30f3-4e39-99a2-e897c6a2cc35",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});"
                  ],
                  "_lastExecutionId": "534a9fea-38bc-461b-85b2-f4c2cd2edb27"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "694b4e3f-f6df-41aa-8bab-4e244257c308",
        "name": "Get Books",
        "item": [
          {
            "id": "4c3ca1a8-07c4-4b9e-95d7-d0a5a20c13d6",
            "name": "Get All Books",
            "request": {
              "url": {
                "path": [
                  "books"
                ],
                "host": [
                  "{{BaseUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5be85490-3b37-4471-a78b-8f2921319faf",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "//Fixed syntax errors and removed redundant code\r",
                    "pm.test(\"Status code should be 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "var jsonData = pm.response.json();\r",
                    "console.log(jsonData);\r",
                    "\r",
                    "pm.environment.set(\"name\", jsonData[0].name);\r",
                    "\r",
                    "const response = pm.response.json();\r",
                    "console.log(response[0].id);\r",
                    "pm.environment.set(\"variable_key\", response[0].id);\r",
                    ""
                  ],
                  "_lastExecutionId": "ab6ccbe1-5118-40dc-b490-3c9874218ab3"
                }
              }
            ]
          },
          {
            "id": "20d5f7b2-1051-4d32-a307-4a7e094d014b",
            "name": "Get Books by ID",
            "request": {
              "url": {
                "path": [
                  "books",
                  ":bookId"
                ],
                "host": [
                  "{{BaseUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "type": "any",
                    "value": "1",
                    "key": "bookId"
                  }
                ]
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "845350c0-3d9c-4eab-8be2-0124e1ad8116",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code should be 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "var jsonData = pm.response.json();\r",
                    "console.log(jsonData.name);\r",
                    "\r",
                    "const response = pm.response.json();\r",
                    "console.log(response.id);\r",
                    "\r",
                    "pm.environment.set(\"Therussian\", \"response.id\");\r",
                    "\r",
                    ""
                  ],
                  "_lastExecutionId": "c361e2b2-2b5a-4e0f-b0ed-e283194d2823"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "dcef2c91-29ab-4b2a-9861-29ebe6cc9033",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "630e8bd6-629f-4712-b2bf-4e5dc807fb59"
                }
              }
            ]
          },
          {
            "id": "3163e573-1588-4906-9583-bc3a4b1b297b",
            "name": "Get Books by Type",
            "request": {
              "url": {
                "path": [
                  "books"
                ],
                "host": [
                  "{{BaseUrl}}"
                ],
                "query": [
                  {
                    "key": "type",
                    "value": "fiction"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "345e67bc-e1b1-4ca1-9755-204d93ef14e6",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "   pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "var jsonData = pm.response.json();\r",
                    "console.log(jsonData.true);\r",
                    "\r",
                    "pm.environment.set(\"available\", \"jsonData.true\");\r",
                    "\r",
                    ""
                  ],
                  "_lastExecutionId": "1f5c5e72-4df3-44b5-a906-1bd9cd10a51f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "70e1ca19-1765-43da-bc75-90152bd1d77d",
        "name": "Place a book order",
        "item": [
          {
            "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
            "name": "Place a book order - using book ID",
            "request": {
              "url": {
                "path": [
                  "orders"
                ],
                "host": [
                  "{{BaseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "description": {
                    "content": "bearer token\n",
                    "type": "text/plain"
                  },
                  "key": "Authorisation",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0114c288-2b80-49cb-a4e4-9ae719be9685",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 201\", function () {\r",
                    "  pm.response.to.have.status(201);\r",
                    "});\r",
                    "pm.test(\"Response string contains 'created'\", function () {\r",
                    "    pm.expect(pm.response.text()).to.include('created');\r",
                    "});\r",
                    "pm.test(\"Boolean value for 'created' is true\", function () {\r",
                    "    pm.expect(pm.response.json().created).to.be.true;\r",
                    "});\r",
                    "pm.test(\"Order is available in the response\", function () {\r",
                    "    pm.expect(pm.response.json()).to.have.property('orderId');\r",
                    "});\r",
                    "const OrderID = pm.response.json();\r",
                    "\r",
                    "console.log(OrderID.orderId);\r",
                    "pm.environment.set(\"OrderID\",OrderID.orderId);"
                  ],
                  "_lastExecutionId": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "32971431-e973-421d-804d-10f2c0b86685",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "49f3dc3f-ee77-4fee-a559-5d2f4c503306"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "60569f46-522a-45fa-bffc-82c01dd3579e",
        "name": "Get an order",
        "item": [
          {
            "id": "d5952326-889d-4c19-9e53-8f937cdf36fa",
            "name": "Get all orders",
            "request": {
              "url": {
                "path": [
                  "orders"
                ],
                "host": [
                  "{{BaseUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b134fea9-ac88-456e-ae44-9d1ab8baf433",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});"
                  ],
                  "_lastExecutionId": "eebb4481-c661-4ea3-bbaa-632abf4d183e"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "07261775-ec30-4cb0-8c9f-548686e2fdcc",
            "name": "Get an order - using orderID",
            "request": {
              "url": {
                "path": [
                  "orders",
                  ":orderId"
                ],
                "host": [
                  "{{BaseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "type": "any",
                    "value": "{{OrderID}}",
                    "key": "orderId"
                  }
                ]
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "77ae4b4d-1fe9-429f-9e30-1575c7782a3c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});"
                  ],
                  "_lastExecutionId": "c1cd3d9e-b54a-48b5-8245-0c7d52bcc9df"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "59c5ceaa-e69c-4a0a-b01c-d9b4912d526c",
        "name": "Update an order",
        "item": [
          {
            "id": "815d0417-7e9d-4c16-8b34-0f9a28b92abd",
            "name": "Update an order",
            "request": {
              "url": {
                "path": [
                  "orders",
                  ""
                ],
                "host": [
                  "{{BaseUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "54e65d03-d02d-4531-aca2-26f05c79c95d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 201\", function () {\r",
                    "  pm.response.to.have.status(201);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "58520b5a-b3e2-4009-8a30-abfc33869941"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "566ece4f-2a29-4f97-9f65-6818ba2e751e",
        "name": "Delete an order",
        "item": [
          {
            "id": "a6f61041-7aec-4715-93ee-c4ffff90dfef",
            "name": "Delete an order",
            "request": {
              "url": {
                "path": [
                  "orders",
                  ":orderId"
                ],
                "host": [
                  "{{BaseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "type": "any",
                    "value": "{{OrderID}}",
                    "key": "orderId"
                  }
                ]
              },
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6574a49a-e7b9-4ed4-af96-a256a0742c9e",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Test to verify that the order with the specified orderId is successfully deleted\r",
                    "pm.test(\"Order deletion successful\", function () {\r",
                    "    pm.response.to.have.status(204);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "c63fae59-6187-43a3-9d4d-199d91ef7e83"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5551893e-a337-49ce-99dd-d18acdad4de4",
        "name": "Register API Client",
        "request": {
          "url": {
            "path": [
              "api-clients",
              ""
            ],
            "host": [
              "{{BaseUrl}}"
            ],
            "query": [
              {
                "disabled": true,
                "key": "",
                "value": null
              }
            ],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n   \"clientName\": \"Enitan\",\n   \"clientEmail\": \"onagoruwaenitanesther@gmail.com\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f1e4db88-55cd-4c9e-9a55-97ae4898da9c",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "8492bbbd-c281-47d7-b357-f52384099b13"
            }
          }
        ]
      },
      {
        "id": "23abdff6-2f91-4a7d-9a76-35a0feaabfa4",
        "name": "Get API Status",
        "request": {
          "url": {
            "path": [
              "status"
            ],
            "host": [
              "{{BaseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "1b77397b-54da-4a43-8d6e-fa690102dd9a",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test 1: Verify the status code is 200\r",
                "//pm.test(\"Status code is 200\", function () {\r",
                "   // pm.response.to.have.status(200);\r",
                "//});\r",
                "\r",
                "// Test 2: Verify the response time is less than 200ms\r",
                "//pm.test(\"Response time is less than 200ms\", function () {\r",
                "   // pm.expect(pm.response.responseTime).to.be.below(200);\r",
                "//});\r",
                "\r",
                "// Test 3: Verify the response body is not empty\r",
                "//pm.test(\"Response body is not empty\", function () {\r",
                "   // pm.expect(pm.response.text()).not.to.be.empty;\r",
                "//});\r",
                "\r",
                "// Test 4: Verify the response includes a 'status' property\r",
                "//pm.test(\"Response includes 'status' property\", function () {\r",
                "   // pm.expect(pm.response.json()).to.have.property('status');\r",
                "//});\r",
                "\r",
                "// Test 5: Verify the response 'status' property is a string\r",
                "//pm.test(\"Response 'status' property is a string\", function () {\r",
                "   // pm.expect(pm.response.json().status).to.be.a('string');\r",
                "//});\r",
                ""
              ],
              "_lastExecutionId": "e1f7addd-51dd-4ae7-9a7c-6bd0f97a7546"
            }
          }
        ]
      },
      {
        "id": "c8753c7c-301a-43c8-8277-746b820284c7",
        "name": "Get All Todo Entries",
        "request": {
          "url": {
            "path": [
              "index.php"
            ],
            "host": [
              "{{BaseUrl}}"
            ],
            "query": [
              {
                "key": "",
                "value": ""
              },
              {
                "key": "",
                "value": "2"
              }
            ],
            "variable": []
          },
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "834422fe-6925-4033-80b0-1f766bcec2b9",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//pm.collectionVariables.get(\"variable_key\");\r",
                "//pm.collectionVariables.get(\"variable_key\");"
              ],
              "_lastExecutionId": "cd22981a-4122-4bb9-b080-dee33338f49b"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "f3e69c24-2f73-4435-bebc-a4cd5b2f1fc1",
      "name": "STSTStudentCourse",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "5cf4cfd8-9b9e-461c-8bc0-3de05611b093",
    "values": []
  },
  "globals": {
    "id": "43f160e8-80d7-487c-9eb7-07f98fcee143",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 18,
        "pending": 0,
        "failed": 4
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 15
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 24,
        "pending": 0,
        "failed": 24
      },
      "testScripts": {
        "total": 15,
        "pending": 0,
        "failed": 4
      },
      "prerequestScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1741780666829,
      "completed": 1741780668370
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "93f4b50b-142f-4048-93f4-de6648c3f58f",
          "httpRequestId": "4249f668-e05d-4c13-a3f8-bd02220b1c04"
        },
        "item": {
          "id": "5e6f5f05-c6b8-49f2-b1d6-546e199f9ff9",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "",
                  "value": ""
                },
                {
                  "key": "",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4adfb1f4-705d-4ee7-b346-341edcf8ed12",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});"
                ],
                "_lastExecutionId": "0135b1a8-d771-43f7-b191-23faf76247cf"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "95c15c79-3a8d-44c0-9abf-1ba992c1ed35",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "47f87c81-5232-4f92-b6e6-50735bb37130"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "index.php"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [
              {
                "key": "",
                "value": ""
              },
              {
                "key": "",
                "value": "2"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "57ee5461-3873-4102-992b-efdf3b2e0dea",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "5e6f5f05-c6b8-49f2-b1d6-546e199f9ff9",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Status code should be 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code should be 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Status code name should have OK string",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status code name should have OK string",
              "message": "expected response to have status reason 'OK' but got undefined",
              "stack": "AssertionError: expected response to have status reason 'OK' but got undefined\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d8c7a83b-09c4-446b-bb46-045dd62103bb",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05f1126a-3d5c-4b51-934b-a41d7c2fc50c"
        },
        "item": {
          "id": "16be725b-e62b-4b91-adec-08868cb5c896",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Fixed syntax and semantic errors\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//pm.test(\"Body is correct\", function () {\r",
                  "  //  pm.response.to.have.body(\"response_body_string\");\r",
                  "//});\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"confirm that title is Fusio\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                  "});\r",
                  "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"categories should include backend\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"categories should match predefined list\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "https://demo.fusio-project.org/index.php/",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "index.php",
              ""
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "392f3f9b-d26a-490d-9d1e-1a454c7481f6",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "16be725b-e62b-4b91-adec-08868cb5c896",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Status code should be 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status code should be 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "confirm that title is Fusio",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "confirm that title is Fusio",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:2)"
            }
          },
          {
            "assertion": "confirm that paymentCurrency is EUR",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "confirm that paymentCurrency is EUR",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:2)"
            }
          },
          {
            "assertion": "Status code name should have OK string",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Status code name should have OK string",
              "message": "expected response to have status reason 'OK' but got undefined",
              "stack": "AssertionError: expected response to have status reason 'OK' but got undefined\n   at Object.eval sandbox-script.js:5:2)"
            }
          },
          {
            "assertion": "categories should include backend",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "categories should include backend",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:6:2)"
            }
          },
          {
            "assertion": "categories should match predefined list",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "categories should match predefined list",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:7:2)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 7,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:8:2)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 8,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:9:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1bb35b6d-2aba-4f1d-b4b1-6cb1d8f827a7",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "58934444-d7cd-4f2e-8961-023b7be832f7"
        },
        "item": {
          "id": "c69b9266-358b-4664-a448-7ba8c91aee01",
          "name": "Get entry per ID - Valid ID",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f43245e-46ed-4125-972f-318924ecfd0a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "_lastExecutionId": "d5c768af-28af-40d3-8a8f-ff3c88e7b86f"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "description": {
            "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "index.php"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "79c71589-54d1-425b-bee1-6a1b47d58663",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": ""
          }
        },
        "id": "c69b9266-358b-4664-a448-7ba8c91aee01",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "75c3953b-12d2-44ea-9592-cc292685acd1",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "44e4e4d7-5aed-46bf-8eb1-43cb562c1924"
        },
        "item": {
          "id": "d4253d8c-3df4-47eb-9a65-3de639e32f57",
          "name": "Get entry per ID - Invalid ID(params not using TODO ID)",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
              "type": "text/plain"
            },
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "36de4fdc-30f3-4e39-99a2-e897c6a2cc35",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "_lastExecutionId": "534a9fea-38bc-461b-85b2-f4c2cd2edb27"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "017bc135-d327-4faa-82c8-84171a11bd8b",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "d4253d8c-3df4-47eb-9a65-3de639e32f57",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cf57ef5e-aacf-4de9-98d6-0f367335ce2b",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "01cb0e57-aa9a-4279-a40c-ad3843fb8e4e"
        },
        "item": {
          "id": "4c3ca1a8-07c4-4b9e-95d7-d0a5a20c13d6",
          "name": "Get All Books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5be85490-3b37-4471-a78b-8f2921319faf",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//Fixed syntax errors and removed redundant code\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData);\r",
                  "\r",
                  "pm.environment.set(\"name\", jsonData[0].name);\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "console.log(response[0].id);\r",
                  "pm.environment.set(\"variable_key\", response[0].id);\r",
                  ""
                ],
                "_lastExecutionId": "ab6ccbe1-5118-40dc-b490-3c9874218ab3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "books"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "abf483eb-1790-40da-9f03-b22aab7173f4",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "key": "token"
              }
            ]
          }
        },
        "id": "4c3ca1a8-07c4-4b9e-95d7-d0a5a20c13d6",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Status code should be 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code should be 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "693a54fa-9233-4038-8556-9f3ebbd07298",
              "timestamp": 1741780667402,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "27d24103-acc3-4313-b8d8-f38ac17cd4c8",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6a52487e-d71f-48df-a568-df48dc844861"
        },
        "item": {
          "id": "20d5f7b2-1051-4d32-a307-4a7e094d014b",
          "name": "Get Books by ID",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookId"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "type": "any",
                  "value": "1",
                  "key": "bookId"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "845350c0-3d9c-4eab-8be2-0124e1ad8116",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData.name);\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "console.log(response.id);\r",
                  "\r",
                  "pm.environment.set(\"Therussian\", \"response.id\");\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "c361e2b2-2b5a-4e0f-b0ed-e283194d2823"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "dcef2c91-29ab-4b2a-9861-29ebe6cc9033",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "630e8bd6-629f-4712-b2bf-4e5dc807fb59"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "books",
              "1"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "549f4259-c981-4c19-b1c4-e7201e102f9d",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "20d5f7b2-1051-4d32-a307-4a7e094d014b",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Status code should be 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code should be 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "928af4cc-a9a6-41a8-934c-2c3ca673cd5d",
              "timestamp": 1741780667483,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b121677a-ff84-4bac-a0d5-3e40ba29b564",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "59cfc977-30ab-4f73-83a9-fa7e078e41dc"
        },
        "item": {
          "id": "3163e573-1588-4906-9583-bc3a4b1b297b",
          "name": "Get Books by Type",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "fiction"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "345e67bc-e1b1-4ca1-9755-204d93ef14e6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "   pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData.true);\r",
                  "\r",
                  "pm.environment.set(\"available\", \"jsonData.true\");\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "1f5c5e72-4df3-44b5-a906-1bd9cd10a51f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "books"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [
              {
                "key": "type",
                "value": "fiction"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e25d4dc2-6f2c-4ca3-96e7-61f76e35b6f4",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "3163e573-1588-4906-9583-bc3a4b1b297b",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "40eb3867-b6aa-402f-baf3-17152b989e51",
              "timestamp": 1741780667589,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7e36122a-834b-4dd9-adba-9e1fd91918d3",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7b1c36a4-dfe7-4c50-a3d9-9d94dc8fde9d"
        },
        "item": {
          "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
          "name": "Place a book order - using book ID",
          "request": {
            "url": {
              "path": [
                "orders"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "bearer token\n",
                  "type": "text/plain"
                },
                "key": "Authorisation",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0114c288-2b80-49cb-a4e4-9ae719be9685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  "pm.test(\"Response string contains 'created'\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include('created');\r",
                  "});\r",
                  "pm.test(\"Boolean value for 'created' is true\", function () {\r",
                  "    pm.expect(pm.response.json().created).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Order is available in the response\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property('orderId');\r",
                  "});\r",
                  "const OrderID = pm.response.json();\r",
                  "\r",
                  "console.log(OrderID.orderId);\r",
                  "pm.environment.set(\"OrderID\",OrderID.orderId);"
                ],
                "_lastExecutionId": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "32971431-e973-421d-804d-10f2c0b86685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "49f3dc3f-ee77-4fee-a559-5d2f4c503306"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "orders"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "description": {
                "content": "bearer token\n",
                "type": "text/plain"
              },
              "key": "Authorisation",
              "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer 73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "67983095-2262-4763-a71f-64793d156101",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                "key": "token"
              }
            ]
          }
        },
        "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response string contains 'created'",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response string contains 'created'",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "Boolean value for 'created' is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Boolean value for 'created' is true",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:8)"
            }
          },
          {
            "assertion": "Order is available in the response",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Order is available in the response",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:8)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "4e33f0c2-f331-4263-bf20-1df0ae6d0b47",
              "timestamp": 1741780667676,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1e0f1957-395f-4211-b44b-df9605b526ba",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2598fed9-4223-462a-a79f-07ba0be87918"
        },
        "item": {
          "id": "d5952326-889d-4c19-9e53-8f937cdf36fa",
          "name": "Get all orders",
          "request": {
            "url": {
              "path": [
                "orders"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b134fea9-ac88-456e-ae44-9d1ab8baf433",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "_lastExecutionId": "eebb4481-c661-4ea3-bbaa-632abf4d183e"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "orders"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer 73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8e2f9ff0-31d5-48fc-882e-092fcd9b741a",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                "key": "token"
              }
            ]
          }
        },
        "id": "d5952326-889d-4c19-9e53-8f937cdf36fa",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "96a7fd39-ef26-40ac-a326-af5508d648fe",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "989e9d21-b776-47c6-8a12-e0d1d67b336a"
        },
        "item": {
          "id": "07261775-ec30-4cb0-8c9f-548686e2fdcc",
          "name": "Get an order - using orderID",
          "request": {
            "url": {
              "path": [
                "orders",
                ":orderId"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{OrderID}}",
                  "key": "orderId"
                }
              ]
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "77ae4b4d-1fe9-429f-9e30-1575c7782a3c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "_lastExecutionId": "c1cd3d9e-b54a-48b5-8245-0c7d52bcc9df"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "orders",
              "%7B%7BOrderID%7D%7D"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer 73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7a121525-4912-4bcd-8726-9ba97eca6152",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                "key": "token"
              }
            ]
          }
        },
        "id": "07261775-ec30-4cb0-8c9f-548686e2fdcc",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9b9dc6e2-fbed-45cc-b8e7-21787a688c0d",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "68806dc4-770a-42d3-a290-2880124d8e96"
        },
        "item": {
          "id": "815d0417-7e9d-4c16-8b34-0f9a28b92abd",
          "name": "Update an order",
          "request": {
            "url": {
              "path": [
                "orders",
                ""
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54e65d03-d02d-4531-aca2-26f05c79c95d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "58520b5a-b3e2-4009-8a30-abfc33869941"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "orders",
              ""
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer 73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e19a9285-457b-4a81-b1db-b2bd1418e983",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                "key": "token"
              }
            ]
          }
        },
        "id": "815d0417-7e9d-4c16-8b34-0f9a28b92abd",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5cc55206-5aba-4a47-adba-23e5c25c2076",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "56d3559e-74d7-4e1b-9d24-eba39232ecd6"
        },
        "item": {
          "id": "a6f61041-7aec-4715-93ee-c4ffff90dfef",
          "name": "Delete an order",
          "request": {
            "url": {
              "path": [
                "orders",
                ":orderId"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{OrderID}}",
                  "key": "orderId"
                }
              ]
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6574a49a-e7b9-4ed4-af96-a256a0742c9e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test to verify that the order with the specified orderId is successfully deleted\r",
                  "pm.test(\"Order deletion successful\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c63fae59-6187-43a3-9d4d-199d91ef7e83"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "orders",
              "%7B%7BOrderID%7D%7D"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer 73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f524e746-3cee-48b4-aba7-b12b277fcf69",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                "key": "token"
              }
            ]
          }
        },
        "id": "a6f61041-7aec-4715-93ee-c4ffff90dfef",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Order deletion successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Order deletion successful",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "63dc2199-e9e4-4268-b7da-0eb00b5908fd",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "82e069e5-d357-4667-9c15-f60078295428"
        },
        "item": {
          "id": "5551893e-a337-49ce-99dd-d18acdad4de4",
          "name": "Register API Client",
          "request": {
            "url": {
              "path": [
                "api-clients",
                ""
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": null
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n   \"clientName\": \"Enitan\",\n   \"clientEmail\": \"onagoruwaenitanesther@gmail.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f1e4db88-55cd-4c9e-9a55-97ae4898da9c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8492bbbd-c281-47d7-b357-f52384099b13"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api-clients",
              ""
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "23ac340a-b40e-4aab-9175-fa6c391569ee",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n   \"clientName\": \"Enitan\",\n   \"clientEmail\": \"onagoruwaenitanesther@gmail.com\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "5551893e-a337-49ce-99dd-d18acdad4de4",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        }
      },
      {
        "cursor": {
          "ref": "548f7333-7689-4756-907c-ec10eee7b2f7",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2b223852-9433-412a-ade7-376c1ce21e36"
        },
        "item": {
          "id": "23abdff6-2f91-4a7d-9a76-35a0feaabfa4",
          "name": "Get API Status",
          "request": {
            "url": {
              "path": [
                "status"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1b77397b-54da-4a43-8d6e-fa690102dd9a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Verify the status code is 200\r",
                  "//pm.test(\"Status code is 200\", function () {\r",
                  "   // pm.response.to.have.status(200);\r",
                  "//});\r",
                  "\r",
                  "// Test 2: Verify the response time is less than 200ms\r",
                  "//pm.test(\"Response time is less than 200ms\", function () {\r",
                  "   // pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "//});\r",
                  "\r",
                  "// Test 3: Verify the response body is not empty\r",
                  "//pm.test(\"Response body is not empty\", function () {\r",
                  "   // pm.expect(pm.response.text()).not.to.be.empty;\r",
                  "//});\r",
                  "\r",
                  "// Test 4: Verify the response includes a 'status' property\r",
                  "//pm.test(\"Response includes 'status' property\", function () {\r",
                  "   // pm.expect(pm.response.json()).to.have.property('status');\r",
                  "//});\r",
                  "\r",
                  "// Test 5: Verify the response 'status' property is a string\r",
                  "//pm.test(\"Response 'status' property is a string\", function () {\r",
                  "   // pm.expect(pm.response.json().status).to.be.a('string');\r",
                  "//});\r",
                  ""
                ],
                "_lastExecutionId": "e1f7addd-51dd-4ae7-9a7c-6bd0f97a7546"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "status"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "68a052af-18d8-4319-9db3-32e9f4b6fcaa",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "23abdff6-2f91-4a7d-9a76-35a0feaabfa4",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        }
      },
      {
        "cursor": {
          "ref": "86f202c5-6cd9-475d-a554-662f37908b20",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3dd67a92-3c1e-4abd-bc4f-f215e7155846"
        },
        "item": {
          "id": "c8753c7c-301a-43c8-8277-746b820284c7",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "key": "",
                  "value": ""
                },
                {
                  "key": "",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "834422fe-6925-4033-80b0-1f766bcec2b9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//pm.collectionVariables.get(\"variable_key\");\r",
                  "//pm.collectionVariables.get(\"variable_key\");"
                ],
                "_lastExecutionId": "cd22981a-4122-4bb9-b080-dee33338f49b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "index.php"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [
              {
                "key": "",
                "value": ""
              },
              {
                "key": "",
                "value": "2"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "747562b0-09d6-4602-b9d0-6c5502e74b29",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "c8753c7c-301a-43c8-8277-746b820284c7",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        }
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "b2de9eca-3deb-4d2a-a974-3e1cb0e73bb6",
          "timestamp": 1741780666964,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "5e6f5f05-c6b8-49f2-b1d6-546e199f9ff9",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "index.php"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [
                {
                  "key": "",
                  "value": ""
                },
                {
                  "key": "",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "57ee5461-3873-4102-992b-efdf3b2e0dea",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4adfb1f4-705d-4ee7-b346-341edcf8ed12",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "95c15c79-3a8d-44c0-9abf-1ba992c1ed35",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "93f4b50b-142f-4048-93f4-de6648c3f58f",
          "httpRequestId": "4249f668-e05d-4c13-a3f8-bd02220b1c04"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code should be 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "2b262dd942dbca025bb2bbe38d2fa034",
          "id": "d6e16310-2a15-4c82-941a-2d6d1aa2224d",
          "timestamp": 1741780666988,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5e6f5f05-c6b8-49f2-b1d6-546e199f9ff9",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "",
                  "value": ""
                },
                {
                  "key": "",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4adfb1f4-705d-4ee7-b346-341edcf8ed12",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});"
                ],
                "_lastExecutionId": "0135b1a8-d771-43f7-b191-23faf76247cf"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "95c15c79-3a8d-44c0-9abf-1ba992c1ed35",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "47f87c81-5232-4f92-b6e6-50735bb37130"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "db451fc2-004b-4606-8584-7f135f2b41de",
          "name": "Get All Todo Entries",
          "item": [
            {
              "id": "5e6f5f05-c6b8-49f2-b1d6-546e199f9ff9",
              "name": "Get All Todo Entries",
              "request": {
                "url": {
                  "path": [
                    "index.php"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "",
                      "value": ""
                    },
                    {
                      "key": "",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4adfb1f4-705d-4ee7-b346-341edcf8ed12",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name should have OK string\", function () {\r",
                      "    pm.response.to.have.status(\"OK\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0135b1a8-d771-43f7-b191-23faf76247cf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "95c15c79-3a8d-44c0-9abf-1ba992c1ed35",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "47f87c81-5232-4f92-b6e6-50735bb37130"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "93f4b50b-142f-4048-93f4-de6648c3f58f",
          "httpRequestId": "4249f668-e05d-4c13-a3f8-bd02220b1c04",
          "scriptId": "4adfb1f4-705d-4ee7-b346-341edcf8ed12",
          "execution": "0135b1a8-d771-43f7-b191-23faf76247cf"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status code name should have OK string",
          "message": "expected response to have status reason 'OK' but got undefined",
          "stack": "AssertionError: expected response to have status reason 'OK' but got undefined\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "d106349cd1a6aadcf9671bcd1ebd9cf5",
          "id": "13bd1229-a8a3-4fc8-a262-ad4c56bf655d",
          "timestamp": 1741780666990,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5e6f5f05-c6b8-49f2-b1d6-546e199f9ff9",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "",
                  "value": ""
                },
                {
                  "key": "",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4adfb1f4-705d-4ee7-b346-341edcf8ed12",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});"
                ],
                "_lastExecutionId": "0135b1a8-d771-43f7-b191-23faf76247cf"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "95c15c79-3a8d-44c0-9abf-1ba992c1ed35",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "47f87c81-5232-4f92-b6e6-50735bb37130"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "db451fc2-004b-4606-8584-7f135f2b41de",
          "name": "Get All Todo Entries",
          "item": [
            {
              "id": "5e6f5f05-c6b8-49f2-b1d6-546e199f9ff9",
              "name": "Get All Todo Entries",
              "request": {
                "url": {
                  "path": [
                    "index.php"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "",
                      "value": ""
                    },
                    {
                      "key": "",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4adfb1f4-705d-4ee7-b346-341edcf8ed12",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name should have OK string\", function () {\r",
                      "    pm.response.to.have.status(\"OK\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0135b1a8-d771-43f7-b191-23faf76247cf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "95c15c79-3a8d-44c0-9abf-1ba992c1ed35",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "47f87c81-5232-4f92-b6e6-50735bb37130"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "93f4b50b-142f-4048-93f4-de6648c3f58f",
          "httpRequestId": "4249f668-e05d-4c13-a3f8-bd02220b1c04",
          "scriptId": "4adfb1f4-705d-4ee7-b346-341edcf8ed12",
          "execution": "0135b1a8-d771-43f7-b191-23faf76247cf"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "53999f3b-76e0-4f40-a8e9-c51c7b229597",
          "timestamp": 1741780667080,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "16be725b-e62b-4b91-adec-08868cb5c896",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "protocol": "http",
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "392f3f9b-d26a-490d-9d1e-1a454c7481f6",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Fixed syntax and semantic errors\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//pm.test(\"Body is correct\", function () {\r",
                  "  //  pm.response.to.have.body(\"response_body_string\");\r",
                  "//});\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"confirm that title is Fusio\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                  "});\r",
                  "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"categories should include backend\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"categories should match predefined list\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "d8c7a83b-09c4-446b-bb46-045dd62103bb",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05f1126a-3d5c-4b51-934b-a41d7c2fc50c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "169020131664477cec85b1c00a6464f6",
          "id": "24790c6f-fbfc-459a-8e75-d32b96d6f146",
          "timestamp": 1741780667096,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "16be725b-e62b-4b91-adec-08868cb5c896",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Fixed syntax and semantic errors\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//pm.test(\"Body is correct\", function () {\r",
                  "  //  pm.response.to.have.body(\"response_body_string\");\r",
                  "//});\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"confirm that title is Fusio\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                  "});\r",
                  "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"categories should include backend\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"categories should match predefined list\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
              }
            }
          ]
        },
        "parent": {
          "id": "5471475b-65c0-4af3-8bb7-e93e5b811ab6",
          "name": "Get All Entries",
          "item": [
            {
              "id": "16be725b-e62b-4b91-adec-08868cb5c896",
              "name": "Get All Entries",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "index.php",
                    ""
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Fixed syntax and semantic errors\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "//pm.test(\"Body is correct\", function () {\r",
                      "  //  pm.response.to.have.body(\"response_body_string\");\r",
                      "//});\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"confirm that title is Fusio\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                      "});\r",
                      "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                      "});\r",
                      "pm.test(\"Status code name should have OK string\", function () {\r",
                      "    pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"categories should include backend\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"categories should match predefined list\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8c7a83b-09c4-446b-bb46-045dd62103bb",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05f1126a-3d5c-4b51-934b-a41d7c2fc50c",
          "scriptId": "17670c39-d820-460a-9ffa-bf8437108e5e",
          "execution": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status code should be 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "5f4c87dad9b896cf5a88b17be2d8d7e8",
          "id": "80efcb02-f826-49d9-bf50-3d5b6e9eb697",
          "timestamp": 1741780667098,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "16be725b-e62b-4b91-adec-08868cb5c896",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Fixed syntax and semantic errors\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//pm.test(\"Body is correct\", function () {\r",
                  "  //  pm.response.to.have.body(\"response_body_string\");\r",
                  "//});\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"confirm that title is Fusio\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                  "});\r",
                  "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"categories should include backend\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"categories should match predefined list\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
              }
            }
          ]
        },
        "parent": {
          "id": "5471475b-65c0-4af3-8bb7-e93e5b811ab6",
          "name": "Get All Entries",
          "item": [
            {
              "id": "16be725b-e62b-4b91-adec-08868cb5c896",
              "name": "Get All Entries",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "index.php",
                    ""
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Fixed syntax and semantic errors\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "//pm.test(\"Body is correct\", function () {\r",
                      "  //  pm.response.to.have.body(\"response_body_string\");\r",
                      "//});\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"confirm that title is Fusio\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                      "});\r",
                      "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                      "});\r",
                      "pm.test(\"Status code name should have OK string\", function () {\r",
                      "    pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"categories should include backend\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"categories should match predefined list\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8c7a83b-09c4-446b-bb46-045dd62103bb",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05f1126a-3d5c-4b51-934b-a41d7c2fc50c",
          "scriptId": "17670c39-d820-460a-9ffa-bf8437108e5e",
          "execution": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "confirm that title is Fusio",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:2)",
          "checksum": "5e71928aa1409b3016eb6918040ca141",
          "id": "857503df-8aad-4300-829a-f06a7622d1c3",
          "timestamp": 1741780667102,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "16be725b-e62b-4b91-adec-08868cb5c896",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Fixed syntax and semantic errors\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//pm.test(\"Body is correct\", function () {\r",
                  "  //  pm.response.to.have.body(\"response_body_string\");\r",
                  "//});\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"confirm that title is Fusio\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                  "});\r",
                  "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"categories should include backend\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"categories should match predefined list\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
              }
            }
          ]
        },
        "parent": {
          "id": "5471475b-65c0-4af3-8bb7-e93e5b811ab6",
          "name": "Get All Entries",
          "item": [
            {
              "id": "16be725b-e62b-4b91-adec-08868cb5c896",
              "name": "Get All Entries",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "index.php",
                    ""
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Fixed syntax and semantic errors\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "//pm.test(\"Body is correct\", function () {\r",
                      "  //  pm.response.to.have.body(\"response_body_string\");\r",
                      "//});\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"confirm that title is Fusio\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                      "});\r",
                      "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                      "});\r",
                      "pm.test(\"Status code name should have OK string\", function () {\r",
                      "    pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"categories should include backend\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"categories should match predefined list\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8c7a83b-09c4-446b-bb46-045dd62103bb",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05f1126a-3d5c-4b51-934b-a41d7c2fc50c",
          "scriptId": "17670c39-d820-460a-9ffa-bf8437108e5e",
          "execution": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "confirm that paymentCurrency is EUR",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:2)",
          "checksum": "fe82bde23e1e0f3c2f45e590cb539dc5",
          "id": "636c5ff2-a85f-4cae-a8a4-2958723cec11",
          "timestamp": 1741780667103,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "16be725b-e62b-4b91-adec-08868cb5c896",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Fixed syntax and semantic errors\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//pm.test(\"Body is correct\", function () {\r",
                  "  //  pm.response.to.have.body(\"response_body_string\");\r",
                  "//});\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"confirm that title is Fusio\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                  "});\r",
                  "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"categories should include backend\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"categories should match predefined list\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
              }
            }
          ]
        },
        "parent": {
          "id": "5471475b-65c0-4af3-8bb7-e93e5b811ab6",
          "name": "Get All Entries",
          "item": [
            {
              "id": "16be725b-e62b-4b91-adec-08868cb5c896",
              "name": "Get All Entries",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "index.php",
                    ""
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Fixed syntax and semantic errors\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "//pm.test(\"Body is correct\", function () {\r",
                      "  //  pm.response.to.have.body(\"response_body_string\");\r",
                      "//});\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"confirm that title is Fusio\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                      "});\r",
                      "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                      "});\r",
                      "pm.test(\"Status code name should have OK string\", function () {\r",
                      "    pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"categories should include backend\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"categories should match predefined list\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8c7a83b-09c4-446b-bb46-045dd62103bb",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05f1126a-3d5c-4b51-934b-a41d7c2fc50c",
          "scriptId": "17670c39-d820-460a-9ffa-bf8437108e5e",
          "execution": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Status code name should have OK string",
          "message": "expected response to have status reason 'OK' but got undefined",
          "stack": "AssertionError: expected response to have status reason 'OK' but got undefined\n   at Object.eval sandbox-script.js:5:2)",
          "checksum": "67020e337a09c7b637240a2964ed5610",
          "id": "fb876c4e-d883-452f-bf2d-0e5a1f406374",
          "timestamp": 1741780667106,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "16be725b-e62b-4b91-adec-08868cb5c896",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Fixed syntax and semantic errors\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//pm.test(\"Body is correct\", function () {\r",
                  "  //  pm.response.to.have.body(\"response_body_string\");\r",
                  "//});\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"confirm that title is Fusio\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                  "});\r",
                  "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"categories should include backend\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"categories should match predefined list\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
              }
            }
          ]
        },
        "parent": {
          "id": "5471475b-65c0-4af3-8bb7-e93e5b811ab6",
          "name": "Get All Entries",
          "item": [
            {
              "id": "16be725b-e62b-4b91-adec-08868cb5c896",
              "name": "Get All Entries",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "index.php",
                    ""
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Fixed syntax and semantic errors\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "//pm.test(\"Body is correct\", function () {\r",
                      "  //  pm.response.to.have.body(\"response_body_string\");\r",
                      "//});\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"confirm that title is Fusio\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                      "});\r",
                      "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                      "});\r",
                      "pm.test(\"Status code name should have OK string\", function () {\r",
                      "    pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"categories should include backend\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"categories should match predefined list\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8c7a83b-09c4-446b-bb46-045dd62103bb",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05f1126a-3d5c-4b51-934b-a41d7c2fc50c",
          "scriptId": "17670c39-d820-460a-9ffa-bf8437108e5e",
          "execution": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 5,
          "test": "categories should include backend",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:6:2)",
          "checksum": "b9949d174fcd94e01eafee237d280ba4",
          "id": "e24a3f12-59e7-40de-81e0-80dc2a9a5d1e",
          "timestamp": 1741780667107,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "16be725b-e62b-4b91-adec-08868cb5c896",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Fixed syntax and semantic errors\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//pm.test(\"Body is correct\", function () {\r",
                  "  //  pm.response.to.have.body(\"response_body_string\");\r",
                  "//});\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"confirm that title is Fusio\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                  "});\r",
                  "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"categories should include backend\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"categories should match predefined list\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
              }
            }
          ]
        },
        "parent": {
          "id": "5471475b-65c0-4af3-8bb7-e93e5b811ab6",
          "name": "Get All Entries",
          "item": [
            {
              "id": "16be725b-e62b-4b91-adec-08868cb5c896",
              "name": "Get All Entries",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "index.php",
                    ""
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Fixed syntax and semantic errors\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "//pm.test(\"Body is correct\", function () {\r",
                      "  //  pm.response.to.have.body(\"response_body_string\");\r",
                      "//});\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"confirm that title is Fusio\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                      "});\r",
                      "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                      "});\r",
                      "pm.test(\"Status code name should have OK string\", function () {\r",
                      "    pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"categories should include backend\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"categories should match predefined list\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8c7a83b-09c4-446b-bb46-045dd62103bb",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05f1126a-3d5c-4b51-934b-a41d7c2fc50c",
          "scriptId": "17670c39-d820-460a-9ffa-bf8437108e5e",
          "execution": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 6,
          "test": "categories should match predefined list",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:7:2)",
          "checksum": "c71094f111050e0b3186e4f25a8e7987",
          "id": "ee77722d-13db-4934-b0c2-dfa94ec152cd",
          "timestamp": 1741780667108,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "16be725b-e62b-4b91-adec-08868cb5c896",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Fixed syntax and semantic errors\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//pm.test(\"Body is correct\", function () {\r",
                  "  //  pm.response.to.have.body(\"response_body_string\");\r",
                  "//});\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"confirm that title is Fusio\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                  "});\r",
                  "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"categories should include backend\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"categories should match predefined list\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
              }
            }
          ]
        },
        "parent": {
          "id": "5471475b-65c0-4af3-8bb7-e93e5b811ab6",
          "name": "Get All Entries",
          "item": [
            {
              "id": "16be725b-e62b-4b91-adec-08868cb5c896",
              "name": "Get All Entries",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "index.php",
                    ""
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Fixed syntax and semantic errors\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "//pm.test(\"Body is correct\", function () {\r",
                      "  //  pm.response.to.have.body(\"response_body_string\");\r",
                      "//});\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"confirm that title is Fusio\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                      "});\r",
                      "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                      "});\r",
                      "pm.test(\"Status code name should have OK string\", function () {\r",
                      "    pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"categories should include backend\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"categories should match predefined list\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8c7a83b-09c4-446b-bb46-045dd62103bb",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05f1126a-3d5c-4b51-934b-a41d7c2fc50c",
          "scriptId": "17670c39-d820-460a-9ffa-bf8437108e5e",
          "execution": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 7,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:8:2)",
          "checksum": "ca741536ee0823bd439dd1485078b4d4",
          "id": "360bdfe5-fa44-42bf-a791-64a54f418a67",
          "timestamp": 1741780667110,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 8,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:7 in test-script",
        "source": {
          "id": "16be725b-e62b-4b91-adec-08868cb5c896",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Fixed syntax and semantic errors\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//pm.test(\"Body is correct\", function () {\r",
                  "  //  pm.response.to.have.body(\"response_body_string\");\r",
                  "//});\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"confirm that title is Fusio\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                  "});\r",
                  "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"categories should include backend\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"categories should match predefined list\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
              }
            }
          ]
        },
        "parent": {
          "id": "5471475b-65c0-4af3-8bb7-e93e5b811ab6",
          "name": "Get All Entries",
          "item": [
            {
              "id": "16be725b-e62b-4b91-adec-08868cb5c896",
              "name": "Get All Entries",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "index.php",
                    ""
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Fixed syntax and semantic errors\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "//pm.test(\"Body is correct\", function () {\r",
                      "  //  pm.response.to.have.body(\"response_body_string\");\r",
                      "//});\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"confirm that title is Fusio\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                      "});\r",
                      "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                      "});\r",
                      "pm.test(\"Status code name should have OK string\", function () {\r",
                      "    pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"categories should include backend\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"categories should match predefined list\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8c7a83b-09c4-446b-bb46-045dd62103bb",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05f1126a-3d5c-4b51-934b-a41d7c2fc50c",
          "scriptId": "17670c39-d820-460a-9ffa-bf8437108e5e",
          "execution": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 8,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:9:2)",
          "checksum": "98883dd9ab2804d3ff0eb0c22933bf4b",
          "id": "812200c7-5c8a-488b-adef-b199854ba5d1",
          "timestamp": 1741780667112,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 9,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:8 in test-script",
        "source": {
          "id": "16be725b-e62b-4b91-adec-08868cb5c896",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Fixed syntax and semantic errors\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//pm.test(\"Body is correct\", function () {\r",
                  "  //  pm.response.to.have.body(\"response_body_string\");\r",
                  "//});\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"confirm that title is Fusio\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                  "});\r",
                  "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                  "});\r",
                  "pm.test(\"Status code name should have OK string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"categories should include backend\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"categories should match predefined list\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
              }
            }
          ]
        },
        "parent": {
          "id": "5471475b-65c0-4af3-8bb7-e93e5b811ab6",
          "name": "Get All Entries",
          "item": [
            {
              "id": "16be725b-e62b-4b91-adec-08868cb5c896",
              "name": "Get All Entries",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "index.php",
                    ""
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17670c39-d820-460a-9ffa-bf8437108e5e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Fixed syntax and semantic errors\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "//pm.test(\"Body is correct\", function () {\r",
                      "  //  pm.response.to.have.body(\"response_body_string\");\r",
                      "//});\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"confirm that title is Fusio\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.title).to.equal(\"Fusio\");\r",
                      "});\r",
                      "pm.test(\"confirm that paymentCurrency is EUR\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.paymentCurrency).to.equal(\"EUR\");\r",
                      "});\r",
                      "pm.test(\"Status code name should have OK string\", function () {\r",
                      "    pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"categories should include backend\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.include(\"backend\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"categories should match predefined list\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.categories).to.eql([\"authorization\", \"backend\", \"consumer\", \"default\", \"system\"]);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8c7a83b-09c4-446b-bb46-045dd62103bb",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05f1126a-3d5c-4b51-934b-a41d7c2fc50c",
          "scriptId": "17670c39-d820-460a-9ffa-bf8437108e5e",
          "execution": "aea48ddb-3750-484f-b9b6-7b8f688082c6"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "c7791e7b-b161-4398-a330-c28844f81059",
          "timestamp": 1741780667194,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c69b9266-358b-4664-a448-7ba8c91aee01",
          "name": "Get entry per ID - Valid ID",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
              "type": "text/plain"
            },
            "url": {
              "protocol": "http",
              "path": [
                "index.php"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "79c71589-54d1-425b-bee1-6a1b47d58663",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f43245e-46ed-4125-972f-318924ecfd0a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "1bb35b6d-2aba-4f1d-b4b1-6cb1d8f827a7",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "58934444-d7cd-4f2e-8961-023b7be832f7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "470ce06f8bb94c3fa9bc0a37723a5549",
          "id": "fcd06c15-0c80-474f-b4e9-87735d8f19af",
          "timestamp": 1741780667210,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c69b9266-358b-4664-a448-7ba8c91aee01",
          "name": "Get entry per ID - Valid ID",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f43245e-46ed-4125-972f-318924ecfd0a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "_lastExecutionId": "d5c768af-28af-40d3-8a8f-ff3c88e7b86f"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "db2d3eda-e115-42c0-810a-fb6119861f7c",
          "name": "Get entry per ID",
          "item": [
            {
              "id": "c69b9266-358b-4664-a448-7ba8c91aee01",
              "name": "Get entry per ID - Valid ID",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "index.php"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f43245e-46ed-4125-972f-318924ecfd0a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "d5c768af-28af-40d3-8a8f-ff3c88e7b86f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "d4253d8c-3df4-47eb-9a65-3de639e32f57",
              "name": "Get entry per ID - Invalid ID(params not using TODO ID)",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36de4fdc-30f3-4e39-99a2-e897c6a2cc35",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "534a9fea-38bc-461b-85b2-f4c2cd2edb27"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1bb35b6d-2aba-4f1d-b4b1-6cb1d8f827a7",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "58934444-d7cd-4f2e-8961-023b7be832f7",
          "scriptId": "5f43245e-46ed-4125-972f-318924ecfd0a",
          "execution": "d5c768af-28af-40d3-8a8f-ff3c88e7b86f"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "18fb1ada-5975-4bae-be50-017a10653fb6",
          "timestamp": 1741780667288,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d4253d8c-3df4-47eb-9a65-3de639e32f57",
          "name": "Get entry per ID - Invalid ID(params not using TODO ID)",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
              "type": "text/plain"
            },
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "017bc135-d327-4faa-82c8-84171a11bd8b",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "36de4fdc-30f3-4e39-99a2-e897c6a2cc35",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "75c3953b-12d2-44ea-9592-cc292685acd1",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "44e4e4d7-5aed-46bf-8eb1-43cb562c1924"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "5e78bc18623b85feb0a8ad40f56e64fc",
          "id": "d867c853-fab7-4f58-95d8-bb178addcb43",
          "timestamp": 1741780667307,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d4253d8c-3df4-47eb-9a65-3de639e32f57",
          "name": "Get entry per ID - Invalid ID(params not using TODO ID)",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
              "type": "text/plain"
            },
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "36de4fdc-30f3-4e39-99a2-e897c6a2cc35",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "_lastExecutionId": "534a9fea-38bc-461b-85b2-f4c2cd2edb27"
              }
            }
          ]
        },
        "parent": {
          "id": "db2d3eda-e115-42c0-810a-fb6119861f7c",
          "name": "Get entry per ID",
          "item": [
            {
              "id": "c69b9266-358b-4664-a448-7ba8c91aee01",
              "name": "Get entry per ID - Valid ID",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "index.php"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f43245e-46ed-4125-972f-318924ecfd0a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "d5c768af-28af-40d3-8a8f-ff3c88e7b86f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "d4253d8c-3df4-47eb-9a65-3de639e32f57",
              "name": "Get entry per ID - Invalid ID(params not using TODO ID)",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36de4fdc-30f3-4e39-99a2-e897c6a2cc35",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "534a9fea-38bc-461b-85b2-f4c2cd2edb27"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "75c3953b-12d2-44ea-9592-cc292685acd1",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "44e4e4d7-5aed-46bf-8eb1-43cb562c1924",
          "scriptId": "36de4fdc-30f3-4e39-99a2-e897c6a2cc35",
          "execution": "534a9fea-38bc-461b-85b2-f4c2cd2edb27"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "870d2767-98a4-4b85-aacf-fbdf93632c54",
          "timestamp": 1741780667378,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4c3ca1a8-07c4-4b9e-95d7-d0a5a20c13d6",
          "name": "Get All Books",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "books"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "abf483eb-1790-40da-9f03-b22aab7173f4",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5be85490-3b37-4471-a78b-8f2921319faf",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//Fixed syntax errors and removed redundant code\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData);\r",
                  "\r",
                  "pm.environment.set(\"name\", jsonData[0].name);\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "console.log(response[0].id);\r",
                  "pm.environment.set(\"variable_key\", response[0].id);\r",
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "cf57ef5e-aacf-4de9-98d6-0f367335ce2b",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "01cb0e57-aa9a-4279-a40c-ad3843fb8e4e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code should be 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "9d1d05a68ee61f6647f1918b699a8efd",
          "id": "48059f08-21a7-444b-a66f-d07e427f9b99",
          "timestamp": 1741780667399,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4c3ca1a8-07c4-4b9e-95d7-d0a5a20c13d6",
          "name": "Get All Books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5be85490-3b37-4471-a78b-8f2921319faf",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//Fixed syntax errors and removed redundant code\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData);\r",
                  "\r",
                  "pm.environment.set(\"name\", jsonData[0].name);\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "console.log(response[0].id);\r",
                  "pm.environment.set(\"variable_key\", response[0].id);\r",
                  ""
                ],
                "_lastExecutionId": "ab6ccbe1-5118-40dc-b490-3c9874218ab3"
              }
            }
          ]
        },
        "parent": {
          "id": "694b4e3f-f6df-41aa-8bab-4e244257c308",
          "name": "Get Books",
          "item": [
            {
              "id": "4c3ca1a8-07c4-4b9e-95d7-d0a5a20c13d6",
              "name": "Get All Books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5be85490-3b37-4471-a78b-8f2921319faf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//Fixed syntax errors and removed redundant code\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData);\r",
                      "\r",
                      "pm.environment.set(\"name\", jsonData[0].name);\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "console.log(response[0].id);\r",
                      "pm.environment.set(\"variable_key\", response[0].id);\r",
                      ""
                    ],
                    "_lastExecutionId": "ab6ccbe1-5118-40dc-b490-3c9874218ab3"
                  }
                }
              ]
            },
            {
              "id": "20d5f7b2-1051-4d32-a307-4a7e094d014b",
              "name": "Get Books by ID",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookId"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "1",
                      "key": "bookId"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "845350c0-3d9c-4eab-8be2-0124e1ad8116",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.name);\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "console.log(response.id);\r",
                      "\r",
                      "pm.environment.set(\"Therussian\", \"response.id\");\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c361e2b2-2b5a-4e0f-b0ed-e283194d2823"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "dcef2c91-29ab-4b2a-9861-29ebe6cc9033",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "630e8bd6-629f-4712-b2bf-4e5dc807fb59"
                  }
                }
              ]
            },
            {
              "id": "3163e573-1588-4906-9583-bc3a4b1b297b",
              "name": "Get Books by Type",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "fiction"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "345e67bc-e1b1-4ca1-9755-204d93ef14e6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "   pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.true);\r",
                      "\r",
                      "pm.environment.set(\"available\", \"jsonData.true\");\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1f5c5e72-4df3-44b5-a906-1bd9cd10a51f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cf57ef5e-aacf-4de9-98d6-0f367335ce2b",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "01cb0e57-aa9a-4279-a40c-ad3843fb8e4e",
          "scriptId": "5be85490-3b37-4471-a78b-8f2921319faf",
          "execution": "ab6ccbe1-5118-40dc-b490-3c9874218ab3"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "693a54fa-9233-4038-8556-9f3ebbd07298",
          "timestamp": 1741780667402,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "4c3ca1a8-07c4-4b9e-95d7-d0a5a20c13d6",
          "name": "Get All Books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5be85490-3b37-4471-a78b-8f2921319faf",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//Fixed syntax errors and removed redundant code\r",
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData);\r",
                  "\r",
                  "pm.environment.set(\"name\", jsonData[0].name);\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "console.log(response[0].id);\r",
                  "pm.environment.set(\"variable_key\", response[0].id);\r",
                  ""
                ],
                "_lastExecutionId": "ab6ccbe1-5118-40dc-b490-3c9874218ab3"
              }
            }
          ]
        },
        "parent": {
          "id": "694b4e3f-f6df-41aa-8bab-4e244257c308",
          "name": "Get Books",
          "item": [
            {
              "id": "4c3ca1a8-07c4-4b9e-95d7-d0a5a20c13d6",
              "name": "Get All Books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5be85490-3b37-4471-a78b-8f2921319faf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//Fixed syntax errors and removed redundant code\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData);\r",
                      "\r",
                      "pm.environment.set(\"name\", jsonData[0].name);\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "console.log(response[0].id);\r",
                      "pm.environment.set(\"variable_key\", response[0].id);\r",
                      ""
                    ],
                    "_lastExecutionId": "ab6ccbe1-5118-40dc-b490-3c9874218ab3"
                  }
                }
              ]
            },
            {
              "id": "20d5f7b2-1051-4d32-a307-4a7e094d014b",
              "name": "Get Books by ID",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookId"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "1",
                      "key": "bookId"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "845350c0-3d9c-4eab-8be2-0124e1ad8116",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.name);\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "console.log(response.id);\r",
                      "\r",
                      "pm.environment.set(\"Therussian\", \"response.id\");\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c361e2b2-2b5a-4e0f-b0ed-e283194d2823"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "dcef2c91-29ab-4b2a-9861-29ebe6cc9033",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "630e8bd6-629f-4712-b2bf-4e5dc807fb59"
                  }
                }
              ]
            },
            {
              "id": "3163e573-1588-4906-9583-bc3a4b1b297b",
              "name": "Get Books by Type",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "fiction"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "345e67bc-e1b1-4ca1-9755-204d93ef14e6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "   pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.true);\r",
                      "\r",
                      "pm.environment.set(\"available\", \"jsonData.true\");\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1f5c5e72-4df3-44b5-a906-1bd9cd10a51f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cf57ef5e-aacf-4de9-98d6-0f367335ce2b",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "01cb0e57-aa9a-4279-a40c-ad3843fb8e4e",
          "scriptId": "5be85490-3b37-4471-a78b-8f2921319faf"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "b7642537-f6a6-4216-804b-22a7d03f0597",
          "timestamp": 1741780667472,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "20d5f7b2-1051-4d32-a307-4a7e094d014b",
          "name": "Get Books by ID",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "books",
                "1"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "549f4259-c981-4c19-b1c4-e7201e102f9d",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "845350c0-3d9c-4eab-8be2-0124e1ad8116",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData.name);\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "console.log(response.id);\r",
                  "\r",
                  "pm.environment.set(\"Therussian\", \"response.id\");\r",
                  "\r",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "dcef2c91-29ab-4b2a-9861-29ebe6cc9033",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "27d24103-acc3-4313-b8d8-f38ac17cd4c8",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6a52487e-d71f-48df-a568-df48dc844861"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code should be 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "ff194de552d9007ef2007af65c073417",
          "id": "3408ce86-f674-42f4-b2e3-1844a02c6852",
          "timestamp": 1741780667481,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "20d5f7b2-1051-4d32-a307-4a7e094d014b",
          "name": "Get Books by ID",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookId"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "type": "any",
                  "value": "1",
                  "key": "bookId"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "845350c0-3d9c-4eab-8be2-0124e1ad8116",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData.name);\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "console.log(response.id);\r",
                  "\r",
                  "pm.environment.set(\"Therussian\", \"response.id\");\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "c361e2b2-2b5a-4e0f-b0ed-e283194d2823"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "dcef2c91-29ab-4b2a-9861-29ebe6cc9033",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "630e8bd6-629f-4712-b2bf-4e5dc807fb59"
              }
            }
          ]
        },
        "parent": {
          "id": "694b4e3f-f6df-41aa-8bab-4e244257c308",
          "name": "Get Books",
          "item": [
            {
              "id": "4c3ca1a8-07c4-4b9e-95d7-d0a5a20c13d6",
              "name": "Get All Books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5be85490-3b37-4471-a78b-8f2921319faf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//Fixed syntax errors and removed redundant code\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData);\r",
                      "\r",
                      "pm.environment.set(\"name\", jsonData[0].name);\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "console.log(response[0].id);\r",
                      "pm.environment.set(\"variable_key\", response[0].id);\r",
                      ""
                    ],
                    "_lastExecutionId": "ab6ccbe1-5118-40dc-b490-3c9874218ab3"
                  }
                }
              ]
            },
            {
              "id": "20d5f7b2-1051-4d32-a307-4a7e094d014b",
              "name": "Get Books by ID",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookId"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "1",
                      "key": "bookId"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "845350c0-3d9c-4eab-8be2-0124e1ad8116",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.name);\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "console.log(response.id);\r",
                      "\r",
                      "pm.environment.set(\"Therussian\", \"response.id\");\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c361e2b2-2b5a-4e0f-b0ed-e283194d2823"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "dcef2c91-29ab-4b2a-9861-29ebe6cc9033",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "630e8bd6-629f-4712-b2bf-4e5dc807fb59"
                  }
                }
              ]
            },
            {
              "id": "3163e573-1588-4906-9583-bc3a4b1b297b",
              "name": "Get Books by Type",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "fiction"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "345e67bc-e1b1-4ca1-9755-204d93ef14e6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "   pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.true);\r",
                      "\r",
                      "pm.environment.set(\"available\", \"jsonData.true\");\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1f5c5e72-4df3-44b5-a906-1bd9cd10a51f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "27d24103-acc3-4313-b8d8-f38ac17cd4c8",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6a52487e-d71f-48df-a568-df48dc844861",
          "scriptId": "845350c0-3d9c-4eab-8be2-0124e1ad8116",
          "execution": "c361e2b2-2b5a-4e0f-b0ed-e283194d2823"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "928af4cc-a9a6-41a8-934c-2c3ca673cd5d",
          "timestamp": 1741780667483,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "20d5f7b2-1051-4d32-a307-4a7e094d014b",
          "name": "Get Books by ID",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookId"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "type": "any",
                  "value": "1",
                  "key": "bookId"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "845350c0-3d9c-4eab-8be2-0124e1ad8116",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code should be 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData.name);\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "console.log(response.id);\r",
                  "\r",
                  "pm.environment.set(\"Therussian\", \"response.id\");\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "c361e2b2-2b5a-4e0f-b0ed-e283194d2823"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "dcef2c91-29ab-4b2a-9861-29ebe6cc9033",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "630e8bd6-629f-4712-b2bf-4e5dc807fb59"
              }
            }
          ]
        },
        "parent": {
          "id": "694b4e3f-f6df-41aa-8bab-4e244257c308",
          "name": "Get Books",
          "item": [
            {
              "id": "4c3ca1a8-07c4-4b9e-95d7-d0a5a20c13d6",
              "name": "Get All Books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5be85490-3b37-4471-a78b-8f2921319faf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//Fixed syntax errors and removed redundant code\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData);\r",
                      "\r",
                      "pm.environment.set(\"name\", jsonData[0].name);\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "console.log(response[0].id);\r",
                      "pm.environment.set(\"variable_key\", response[0].id);\r",
                      ""
                    ],
                    "_lastExecutionId": "ab6ccbe1-5118-40dc-b490-3c9874218ab3"
                  }
                }
              ]
            },
            {
              "id": "20d5f7b2-1051-4d32-a307-4a7e094d014b",
              "name": "Get Books by ID",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookId"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "1",
                      "key": "bookId"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "845350c0-3d9c-4eab-8be2-0124e1ad8116",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.name);\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "console.log(response.id);\r",
                      "\r",
                      "pm.environment.set(\"Therussian\", \"response.id\");\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c361e2b2-2b5a-4e0f-b0ed-e283194d2823"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "dcef2c91-29ab-4b2a-9861-29ebe6cc9033",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "630e8bd6-629f-4712-b2bf-4e5dc807fb59"
                  }
                }
              ]
            },
            {
              "id": "3163e573-1588-4906-9583-bc3a4b1b297b",
              "name": "Get Books by Type",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "fiction"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "345e67bc-e1b1-4ca1-9755-204d93ef14e6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "   pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.true);\r",
                      "\r",
                      "pm.environment.set(\"available\", \"jsonData.true\");\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1f5c5e72-4df3-44b5-a906-1bd9cd10a51f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "27d24103-acc3-4313-b8d8-f38ac17cd4c8",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6a52487e-d71f-48df-a568-df48dc844861",
          "scriptId": "845350c0-3d9c-4eab-8be2-0124e1ad8116"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "b8268c55-6161-4a79-b66a-0773d3bbb972",
          "timestamp": 1741780667569,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3163e573-1588-4906-9583-bc3a4b1b297b",
          "name": "Get Books by Type",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "books"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "fiction"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "e25d4dc2-6f2c-4ca3-96e7-61f76e35b6f4",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "345e67bc-e1b1-4ca1-9755-204d93ef14e6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "   pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData.true);\r",
                  "\r",
                  "pm.environment.set(\"available\", \"jsonData.true\");\r",
                  "\r",
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "b121677a-ff84-4bac-a0d5-3e40ba29b564",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "59cfc977-30ab-4f73-83a9-fa7e078e41dc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "cceaa75a111dfd6afb1dcf3ec5edba7f",
          "id": "03924c78-4062-4135-bda6-3d04eaa91c42",
          "timestamp": 1741780667584,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3163e573-1588-4906-9583-bc3a4b1b297b",
          "name": "Get Books by Type",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "fiction"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "345e67bc-e1b1-4ca1-9755-204d93ef14e6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "   pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData.true);\r",
                  "\r",
                  "pm.environment.set(\"available\", \"jsonData.true\");\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "1f5c5e72-4df3-44b5-a906-1bd9cd10a51f"
              }
            }
          ]
        },
        "parent": {
          "id": "694b4e3f-f6df-41aa-8bab-4e244257c308",
          "name": "Get Books",
          "item": [
            {
              "id": "4c3ca1a8-07c4-4b9e-95d7-d0a5a20c13d6",
              "name": "Get All Books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5be85490-3b37-4471-a78b-8f2921319faf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//Fixed syntax errors and removed redundant code\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData);\r",
                      "\r",
                      "pm.environment.set(\"name\", jsonData[0].name);\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "console.log(response[0].id);\r",
                      "pm.environment.set(\"variable_key\", response[0].id);\r",
                      ""
                    ],
                    "_lastExecutionId": "ab6ccbe1-5118-40dc-b490-3c9874218ab3"
                  }
                }
              ]
            },
            {
              "id": "20d5f7b2-1051-4d32-a307-4a7e094d014b",
              "name": "Get Books by ID",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookId"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "1",
                      "key": "bookId"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "845350c0-3d9c-4eab-8be2-0124e1ad8116",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.name);\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "console.log(response.id);\r",
                      "\r",
                      "pm.environment.set(\"Therussian\", \"response.id\");\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c361e2b2-2b5a-4e0f-b0ed-e283194d2823"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "dcef2c91-29ab-4b2a-9861-29ebe6cc9033",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "630e8bd6-629f-4712-b2bf-4e5dc807fb59"
                  }
                }
              ]
            },
            {
              "id": "3163e573-1588-4906-9583-bc3a4b1b297b",
              "name": "Get Books by Type",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "fiction"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "345e67bc-e1b1-4ca1-9755-204d93ef14e6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "   pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.true);\r",
                      "\r",
                      "pm.environment.set(\"available\", \"jsonData.true\");\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1f5c5e72-4df3-44b5-a906-1bd9cd10a51f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b121677a-ff84-4bac-a0d5-3e40ba29b564",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "59cfc977-30ab-4f73-83a9-fa7e078e41dc",
          "scriptId": "345e67bc-e1b1-4ca1-9755-204d93ef14e6",
          "execution": "1f5c5e72-4df3-44b5-a906-1bd9cd10a51f"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "40eb3867-b6aa-402f-baf3-17152b989e51",
          "timestamp": 1741780667589,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "3163e573-1588-4906-9583-bc3a4b1b297b",
          "name": "Get Books by Type",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "fiction"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "345e67bc-e1b1-4ca1-9755-204d93ef14e6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "   pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData.true);\r",
                  "\r",
                  "pm.environment.set(\"available\", \"jsonData.true\");\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "1f5c5e72-4df3-44b5-a906-1bd9cd10a51f"
              }
            }
          ]
        },
        "parent": {
          "id": "694b4e3f-f6df-41aa-8bab-4e244257c308",
          "name": "Get Books",
          "item": [
            {
              "id": "4c3ca1a8-07c4-4b9e-95d7-d0a5a20c13d6",
              "name": "Get All Books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5be85490-3b37-4471-a78b-8f2921319faf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//Fixed syntax errors and removed redundant code\r",
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData);\r",
                      "\r",
                      "pm.environment.set(\"name\", jsonData[0].name);\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "console.log(response[0].id);\r",
                      "pm.environment.set(\"variable_key\", response[0].id);\r",
                      ""
                    ],
                    "_lastExecutionId": "ab6ccbe1-5118-40dc-b490-3c9874218ab3"
                  }
                }
              ]
            },
            {
              "id": "20d5f7b2-1051-4d32-a307-4a7e094d014b",
              "name": "Get Books by ID",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookId"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "1",
                      "key": "bookId"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "845350c0-3d9c-4eab-8be2-0124e1ad8116",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code should be 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.name);\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "console.log(response.id);\r",
                      "\r",
                      "pm.environment.set(\"Therussian\", \"response.id\");\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c361e2b2-2b5a-4e0f-b0ed-e283194d2823"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "dcef2c91-29ab-4b2a-9861-29ebe6cc9033",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "630e8bd6-629f-4712-b2bf-4e5dc807fb59"
                  }
                }
              ]
            },
            {
              "id": "3163e573-1588-4906-9583-bc3a4b1b297b",
              "name": "Get Books by Type",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "fiction"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "345e67bc-e1b1-4ca1-9755-204d93ef14e6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "   pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.true);\r",
                      "\r",
                      "pm.environment.set(\"available\", \"jsonData.true\");\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1f5c5e72-4df3-44b5-a906-1bd9cd10a51f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b121677a-ff84-4bac-a0d5-3e40ba29b564",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "59cfc977-30ab-4f73-83a9-fa7e078e41dc",
          "scriptId": "345e67bc-e1b1-4ca1-9755-204d93ef14e6"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "c84bd60e-d7e6-46b2-8698-ba9f45e5d535",
          "timestamp": 1741780667655,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
          "name": "Place a book order - using book ID",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "orders"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "bearer token\n",
                  "type": "text/plain"
                },
                "key": "Authorisation",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "Authorization",
                "value": "Bearer 73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "67983095-2262-4763-a71f-64793d156101",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0114c288-2b80-49cb-a4e4-9ae719be9685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  "pm.test(\"Response string contains 'created'\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include('created');\r",
                  "});\r",
                  "pm.test(\"Boolean value for 'created' is true\", function () {\r",
                  "    pm.expect(pm.response.json().created).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Order is available in the response\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property('orderId');\r",
                  "});\r",
                  "const OrderID = pm.response.json();\r",
                  "\r",
                  "console.log(OrderID.orderId);\r",
                  "pm.environment.set(\"OrderID\",OrderID.orderId);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "32971431-e973-421d-804d-10f2c0b86685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "7e36122a-834b-4dd9-adba-9e1fd91918d3",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7b1c36a4-dfe7-4c50-a3d9-9d94dc8fde9d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "76bf8e58894ef5fafd597b63d2688347",
          "id": "6d002fa8-122c-47db-b444-ea35adf40bd5",
          "timestamp": 1741780667669,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
          "name": "Place a book order - using book ID",
          "request": {
            "url": {
              "path": [
                "orders"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "bearer token\n",
                  "type": "text/plain"
                },
                "key": "Authorisation",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0114c288-2b80-49cb-a4e4-9ae719be9685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  "pm.test(\"Response string contains 'created'\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include('created');\r",
                  "});\r",
                  "pm.test(\"Boolean value for 'created' is true\", function () {\r",
                  "    pm.expect(pm.response.json().created).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Order is available in the response\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property('orderId');\r",
                  "});\r",
                  "const OrderID = pm.response.json();\r",
                  "\r",
                  "console.log(OrderID.orderId);\r",
                  "pm.environment.set(\"OrderID\",OrderID.orderId);"
                ],
                "_lastExecutionId": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "32971431-e973-421d-804d-10f2c0b86685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "49f3dc3f-ee77-4fee-a559-5d2f4c503306"
              }
            }
          ]
        },
        "parent": {
          "id": "70e1ca19-1765-43da-bc75-90152bd1d77d",
          "name": "Place a book order",
          "item": [
            {
              "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
              "name": "Place a book order - using book ID",
              "request": {
                "url": {
                  "path": [
                    "orders"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "bearer token\n",
                      "type": "text/plain"
                    },
                    "key": "Authorisation",
                    "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0114c288-2b80-49cb-a4e4-9ae719be9685",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Response string contains 'created'\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include('created');\r",
                      "});\r",
                      "pm.test(\"Boolean value for 'created' is true\", function () {\r",
                      "    pm.expect(pm.response.json().created).to.be.true;\r",
                      "});\r",
                      "pm.test(\"Order is available in the response\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('orderId');\r",
                      "});\r",
                      "const OrderID = pm.response.json();\r",
                      "\r",
                      "console.log(OrderID.orderId);\r",
                      "pm.environment.set(\"OrderID\",OrderID.orderId);"
                    ],
                    "_lastExecutionId": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "32971431-e973-421d-804d-10f2c0b86685",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "49f3dc3f-ee77-4fee-a559-5d2f4c503306"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7e36122a-834b-4dd9-adba-9e1fd91918d3",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7b1c36a4-dfe7-4c50-a3d9-9d94dc8fde9d",
          "scriptId": "0114c288-2b80-49cb-a4e4-9ae719be9685",
          "execution": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response string contains 'created'",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "d39fffdbafad003e69153fb120760a70",
          "id": "98117b73-6122-47ca-ac34-8d616cc49e71",
          "timestamp": 1741780667671,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
          "name": "Place a book order - using book ID",
          "request": {
            "url": {
              "path": [
                "orders"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "bearer token\n",
                  "type": "text/plain"
                },
                "key": "Authorisation",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0114c288-2b80-49cb-a4e4-9ae719be9685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  "pm.test(\"Response string contains 'created'\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include('created');\r",
                  "});\r",
                  "pm.test(\"Boolean value for 'created' is true\", function () {\r",
                  "    pm.expect(pm.response.json().created).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Order is available in the response\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property('orderId');\r",
                  "});\r",
                  "const OrderID = pm.response.json();\r",
                  "\r",
                  "console.log(OrderID.orderId);\r",
                  "pm.environment.set(\"OrderID\",OrderID.orderId);"
                ],
                "_lastExecutionId": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "32971431-e973-421d-804d-10f2c0b86685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "49f3dc3f-ee77-4fee-a559-5d2f4c503306"
              }
            }
          ]
        },
        "parent": {
          "id": "70e1ca19-1765-43da-bc75-90152bd1d77d",
          "name": "Place a book order",
          "item": [
            {
              "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
              "name": "Place a book order - using book ID",
              "request": {
                "url": {
                  "path": [
                    "orders"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "bearer token\n",
                      "type": "text/plain"
                    },
                    "key": "Authorisation",
                    "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0114c288-2b80-49cb-a4e4-9ae719be9685",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Response string contains 'created'\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include('created');\r",
                      "});\r",
                      "pm.test(\"Boolean value for 'created' is true\", function () {\r",
                      "    pm.expect(pm.response.json().created).to.be.true;\r",
                      "});\r",
                      "pm.test(\"Order is available in the response\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('orderId');\r",
                      "});\r",
                      "const OrderID = pm.response.json();\r",
                      "\r",
                      "console.log(OrderID.orderId);\r",
                      "pm.environment.set(\"OrderID\",OrderID.orderId);"
                    ],
                    "_lastExecutionId": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "32971431-e973-421d-804d-10f2c0b86685",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "49f3dc3f-ee77-4fee-a559-5d2f4c503306"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7e36122a-834b-4dd9-adba-9e1fd91918d3",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7b1c36a4-dfe7-4c50-a3d9-9d94dc8fde9d",
          "scriptId": "0114c288-2b80-49cb-a4e4-9ae719be9685",
          "execution": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Boolean value for 'created' is true",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:8)",
          "checksum": "8064fcdfa1ac53aab6e7f966cc316fd7",
          "id": "8cf1c16e-821b-496f-bdbb-b015bd8333b2",
          "timestamp": 1741780667672,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
          "name": "Place a book order - using book ID",
          "request": {
            "url": {
              "path": [
                "orders"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "bearer token\n",
                  "type": "text/plain"
                },
                "key": "Authorisation",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0114c288-2b80-49cb-a4e4-9ae719be9685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  "pm.test(\"Response string contains 'created'\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include('created');\r",
                  "});\r",
                  "pm.test(\"Boolean value for 'created' is true\", function () {\r",
                  "    pm.expect(pm.response.json().created).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Order is available in the response\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property('orderId');\r",
                  "});\r",
                  "const OrderID = pm.response.json();\r",
                  "\r",
                  "console.log(OrderID.orderId);\r",
                  "pm.environment.set(\"OrderID\",OrderID.orderId);"
                ],
                "_lastExecutionId": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "32971431-e973-421d-804d-10f2c0b86685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "49f3dc3f-ee77-4fee-a559-5d2f4c503306"
              }
            }
          ]
        },
        "parent": {
          "id": "70e1ca19-1765-43da-bc75-90152bd1d77d",
          "name": "Place a book order",
          "item": [
            {
              "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
              "name": "Place a book order - using book ID",
              "request": {
                "url": {
                  "path": [
                    "orders"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "bearer token\n",
                      "type": "text/plain"
                    },
                    "key": "Authorisation",
                    "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0114c288-2b80-49cb-a4e4-9ae719be9685",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Response string contains 'created'\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include('created');\r",
                      "});\r",
                      "pm.test(\"Boolean value for 'created' is true\", function () {\r",
                      "    pm.expect(pm.response.json().created).to.be.true;\r",
                      "});\r",
                      "pm.test(\"Order is available in the response\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('orderId');\r",
                      "});\r",
                      "const OrderID = pm.response.json();\r",
                      "\r",
                      "console.log(OrderID.orderId);\r",
                      "pm.environment.set(\"OrderID\",OrderID.orderId);"
                    ],
                    "_lastExecutionId": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "32971431-e973-421d-804d-10f2c0b86685",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "49f3dc3f-ee77-4fee-a559-5d2f4c503306"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7e36122a-834b-4dd9-adba-9e1fd91918d3",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7b1c36a4-dfe7-4c50-a3d9-9d94dc8fde9d",
          "scriptId": "0114c288-2b80-49cb-a4e4-9ae719be9685",
          "execution": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Order is available in the response",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:8)",
          "checksum": "f871efed93d116ec160af0fc2ff96f0d",
          "id": "40bb9673-e0ad-4170-92e7-fa0fcfe0a7bc",
          "timestamp": 1741780667673,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
          "name": "Place a book order - using book ID",
          "request": {
            "url": {
              "path": [
                "orders"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "bearer token\n",
                  "type": "text/plain"
                },
                "key": "Authorisation",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0114c288-2b80-49cb-a4e4-9ae719be9685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  "pm.test(\"Response string contains 'created'\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include('created');\r",
                  "});\r",
                  "pm.test(\"Boolean value for 'created' is true\", function () {\r",
                  "    pm.expect(pm.response.json().created).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Order is available in the response\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property('orderId');\r",
                  "});\r",
                  "const OrderID = pm.response.json();\r",
                  "\r",
                  "console.log(OrderID.orderId);\r",
                  "pm.environment.set(\"OrderID\",OrderID.orderId);"
                ],
                "_lastExecutionId": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "32971431-e973-421d-804d-10f2c0b86685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "49f3dc3f-ee77-4fee-a559-5d2f4c503306"
              }
            }
          ]
        },
        "parent": {
          "id": "70e1ca19-1765-43da-bc75-90152bd1d77d",
          "name": "Place a book order",
          "item": [
            {
              "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
              "name": "Place a book order - using book ID",
              "request": {
                "url": {
                  "path": [
                    "orders"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "bearer token\n",
                      "type": "text/plain"
                    },
                    "key": "Authorisation",
                    "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0114c288-2b80-49cb-a4e4-9ae719be9685",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Response string contains 'created'\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include('created');\r",
                      "});\r",
                      "pm.test(\"Boolean value for 'created' is true\", function () {\r",
                      "    pm.expect(pm.response.json().created).to.be.true;\r",
                      "});\r",
                      "pm.test(\"Order is available in the response\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('orderId');\r",
                      "});\r",
                      "const OrderID = pm.response.json();\r",
                      "\r",
                      "console.log(OrderID.orderId);\r",
                      "pm.environment.set(\"OrderID\",OrderID.orderId);"
                    ],
                    "_lastExecutionId": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "32971431-e973-421d-804d-10f2c0b86685",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "49f3dc3f-ee77-4fee-a559-5d2f4c503306"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7e36122a-834b-4dd9-adba-9e1fd91918d3",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7b1c36a4-dfe7-4c50-a3d9-9d94dc8fde9d",
          "scriptId": "0114c288-2b80-49cb-a4e4-9ae719be9685",
          "execution": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "4e33f0c2-f331-4263-bf20-1df0ae6d0b47",
          "timestamp": 1741780667676,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
          "name": "Place a book order - using book ID",
          "request": {
            "url": {
              "path": [
                "orders"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "bearer token\n",
                  "type": "text/plain"
                },
                "key": "Authorisation",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0114c288-2b80-49cb-a4e4-9ae719be9685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  "pm.test(\"Response string contains 'created'\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include('created');\r",
                  "});\r",
                  "pm.test(\"Boolean value for 'created' is true\", function () {\r",
                  "    pm.expect(pm.response.json().created).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Order is available in the response\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property('orderId');\r",
                  "});\r",
                  "const OrderID = pm.response.json();\r",
                  "\r",
                  "console.log(OrderID.orderId);\r",
                  "pm.environment.set(\"OrderID\",OrderID.orderId);"
                ],
                "_lastExecutionId": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "32971431-e973-421d-804d-10f2c0b86685",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "49f3dc3f-ee77-4fee-a559-5d2f4c503306"
              }
            }
          ]
        },
        "parent": {
          "id": "70e1ca19-1765-43da-bc75-90152bd1d77d",
          "name": "Place a book order",
          "item": [
            {
              "id": "1c7b2133-4ec7-48c4-acae-28abd48389b4",
              "name": "Place a book order - using book ID",
              "request": {
                "url": {
                  "path": [
                    "orders"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "bearer token\n",
                      "type": "text/plain"
                    },
                    "key": "Authorisation",
                    "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"bookId\": {{variable_key}},\n    \"customerName\": \"Enitan\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0114c288-2b80-49cb-a4e4-9ae719be9685",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "pm.test(\"Response string contains 'created'\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include('created');\r",
                      "});\r",
                      "pm.test(\"Boolean value for 'created' is true\", function () {\r",
                      "    pm.expect(pm.response.json().created).to.be.true;\r",
                      "});\r",
                      "pm.test(\"Order is available in the response\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('orderId');\r",
                      "});\r",
                      "const OrderID = pm.response.json();\r",
                      "\r",
                      "console.log(OrderID.orderId);\r",
                      "pm.environment.set(\"OrderID\",OrderID.orderId);"
                    ],
                    "_lastExecutionId": "d4e275a8-1e83-4536-89a0-d85f0d00cbde"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "32971431-e973-421d-804d-10f2c0b86685",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "49f3dc3f-ee77-4fee-a559-5d2f4c503306"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7e36122a-834b-4dd9-adba-9e1fd91918d3",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7b1c36a4-dfe7-4c50-a3d9-9d94dc8fde9d",
          "scriptId": "0114c288-2b80-49cb-a4e4-9ae719be9685"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "c32c08b1-1095-464c-9a61-f2756b53e433",
          "timestamp": 1741780667763,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d5952326-889d-4c19-9e53-8f937cdf36fa",
          "name": "Get all orders",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "orders"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer 73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8e2f9ff0-31d5-48fc-882e-092fcd9b741a",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b134fea9-ac88-456e-ae44-9d1ab8baf433",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "1e0f1957-395f-4211-b44b-df9605b526ba",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2598fed9-4223-462a-a79f-07ba0be87918"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "3c8b6d0f45100a696bd28f8ebac2fd43",
          "id": "2c60443d-b881-48cb-8664-a5711974a850",
          "timestamp": 1741780667776,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d5952326-889d-4c19-9e53-8f937cdf36fa",
          "name": "Get all orders",
          "request": {
            "url": {
              "path": [
                "orders"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b134fea9-ac88-456e-ae44-9d1ab8baf433",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "_lastExecutionId": "eebb4481-c661-4ea3-bbaa-632abf4d183e"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "60569f46-522a-45fa-bffc-82c01dd3579e",
          "name": "Get an order",
          "item": [
            {
              "id": "d5952326-889d-4c19-9e53-8f937cdf36fa",
              "name": "Get all orders",
              "request": {
                "url": {
                  "path": [
                    "orders"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b134fea9-ac88-456e-ae44-9d1ab8baf433",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "eebb4481-c661-4ea3-bbaa-632abf4d183e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "07261775-ec30-4cb0-8c9f-548686e2fdcc",
              "name": "Get an order - using orderID",
              "request": {
                "url": {
                  "path": [
                    "orders",
                    ":orderId"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{OrderID}}",
                      "key": "orderId"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77ae4b4d-1fe9-429f-9e30-1575c7782a3c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1cd3d9e-b54a-48b5-8245-0c7d52bcc9df"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1e0f1957-395f-4211-b44b-df9605b526ba",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2598fed9-4223-462a-a79f-07ba0be87918",
          "scriptId": "b134fea9-ac88-456e-ae44-9d1ab8baf433",
          "execution": "eebb4481-c661-4ea3-bbaa-632abf4d183e"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "866b01ee-58f8-400e-87cc-fec63bcfef76",
          "timestamp": 1741780667864,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "07261775-ec30-4cb0-8c9f-548686e2fdcc",
          "name": "Get an order - using orderID",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "orders",
                "%7B%7BOrderID%7D%7D"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer 73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "7a121525-4912-4bcd-8726-9ba97eca6152",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "77ae4b4d-1fe9-429f-9e30-1575c7782a3c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "96a7fd39-ef26-40ac-a326-af5508d648fe",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "989e9d21-b776-47c6-8a12-e0d1d67b336a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "1532f8dadbbfa79e43ec80ab9ad55a24",
          "id": "e0ae9545-2d0a-4bec-b8f8-c48a8e527a2c",
          "timestamp": 1741780667875,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "07261775-ec30-4cb0-8c9f-548686e2fdcc",
          "name": "Get an order - using orderID",
          "request": {
            "url": {
              "path": [
                "orders",
                ":orderId"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{OrderID}}",
                  "key": "orderId"
                }
              ]
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "77ae4b4d-1fe9-429f-9e30-1575c7782a3c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "_lastExecutionId": "c1cd3d9e-b54a-48b5-8245-0c7d52bcc9df"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "60569f46-522a-45fa-bffc-82c01dd3579e",
          "name": "Get an order",
          "item": [
            {
              "id": "d5952326-889d-4c19-9e53-8f937cdf36fa",
              "name": "Get all orders",
              "request": {
                "url": {
                  "path": [
                    "orders"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b134fea9-ac88-456e-ae44-9d1ab8baf433",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "eebb4481-c661-4ea3-bbaa-632abf4d183e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "07261775-ec30-4cb0-8c9f-548686e2fdcc",
              "name": "Get an order - using orderID",
              "request": {
                "url": {
                  "path": [
                    "orders",
                    ":orderId"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{OrderID}}",
                      "key": "orderId"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77ae4b4d-1fe9-429f-9e30-1575c7782a3c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c1cd3d9e-b54a-48b5-8245-0c7d52bcc9df"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "96a7fd39-ef26-40ac-a326-af5508d648fe",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "989e9d21-b776-47c6-8a12-e0d1d67b336a",
          "scriptId": "77ae4b4d-1fe9-429f-9e30-1575c7782a3c",
          "execution": "c1cd3d9e-b54a-48b5-8245-0c7d52bcc9df"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "3c620c94-1b9a-4cb5-be5b-ab7cf3ca8cc2",
          "timestamp": 1741780667976,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "815d0417-7e9d-4c16-8b34-0f9a28b92abd",
          "name": "Update an order",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "orders",
                ""
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "Authorization",
                "value": "Bearer 73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "e19a9285-457b-4a81-b1db-b2bd1418e983",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54e65d03-d02d-4531-aca2-26f05c79c95d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "9b9dc6e2-fbed-45cc-b8e7-21787a688c0d",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "68806dc4-770a-42d3-a290-2880124d8e96"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "e35ec88e555964480d22085119ab17ec",
          "id": "715449bf-6bc8-4167-a5e1-149ce3063554",
          "timestamp": 1741780667991,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "815d0417-7e9d-4c16-8b34-0f9a28b92abd",
          "name": "Update an order",
          "request": {
            "url": {
              "path": [
                "orders",
                ""
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54e65d03-d02d-4531-aca2-26f05c79c95d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "58520b5a-b3e2-4009-8a30-abfc33869941"
              }
            }
          ]
        },
        "parent": {
          "id": "59c5ceaa-e69c-4a0a-b01c-d9b4912d526c",
          "name": "Update an order",
          "item": [
            {
              "id": "815d0417-7e9d-4c16-8b34-0f9a28b92abd",
              "name": "Update an order",
              "request": {
                "url": {
                  "path": [
                    "orders",
                    ""
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54e65d03-d02d-4531-aca2-26f05c79c95d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "58520b5a-b3e2-4009-8a30-abfc33869941"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9b9dc6e2-fbed-45cc-b8e7-21787a688c0d",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "68806dc4-770a-42d3-a290-2880124d8e96",
          "scriptId": "54e65d03-d02d-4531-aca2-26f05c79c95d",
          "execution": "58520b5a-b3e2-4009-8a30-abfc33869941"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "f5757e79-deb4-4a4e-83b2-ab1f86418156",
          "timestamp": 1741780668062,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "a6f61041-7aec-4715-93ee-c4ffff90dfef",
          "name": "Delete an order",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "orders",
                "%7B%7BOrderID%7D%7D"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer 73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "f524e746-3cee-48b4-aba7-b12b277fcf69",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6574a49a-e7b9-4ed4-af96-a256a0742c9e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test to verify that the order with the specified orderId is successfully deleted\r",
                  "pm.test(\"Order deletion successful\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "5cc55206-5aba-4a47-adba-23e5c25c2076",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "56d3559e-74d7-4e1b-9d24-eba39232ecd6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Order deletion successful",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "8da7d56073f2a775e1237dda5a903097",
          "id": "9a6653b7-3389-4b8f-a4f2-dcf4d145ca77",
          "timestamp": 1741780668080,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a6f61041-7aec-4715-93ee-c4ffff90dfef",
          "name": "Delete an order",
          "request": {
            "url": {
              "path": [
                "orders",
                ":orderId"
              ],
              "host": [
                "{{BaseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{OrderID}}",
                  "key": "orderId"
                }
              ]
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6574a49a-e7b9-4ed4-af96-a256a0742c9e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test to verify that the order with the specified orderId is successfully deleted\r",
                  "pm.test(\"Order deletion successful\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c63fae59-6187-43a3-9d4d-199d91ef7e83"
              }
            }
          ]
        },
        "parent": {
          "id": "566ece4f-2a29-4f97-9f65-6818ba2e751e",
          "name": "Delete an order",
          "item": [
            {
              "id": "a6f61041-7aec-4715-93ee-c4ffff90dfef",
              "name": "Delete an order",
              "request": {
                "url": {
                  "path": [
                    "orders",
                    ":orderId"
                  ],
                  "host": [
                    "{{BaseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{OrderID}}",
                      "key": "orderId"
                    }
                  ]
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "73b0b797fbb8980987bbe1db453214c409e04912867bb1f99c4a2295a74eb1a0",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6574a49a-e7b9-4ed4-af96-a256a0742c9e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test to verify that the order with the specified orderId is successfully deleted\r",
                      "pm.test(\"Order deletion successful\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c63fae59-6187-43a3-9d4d-199d91ef7e83"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5cc55206-5aba-4a47-adba-23e5c25c2076",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "56d3559e-74d7-4e1b-9d24-eba39232ecd6",
          "scriptId": "6574a49a-e7b9-4ed4-af96-a256a0742c9e",
          "execution": "c63fae59-6187-43a3-9d4d-199d91ef7e83"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "779ce42c-c4f6-4b1d-9d35-fa579f803e9f",
          "timestamp": 1741780668142,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "5551893e-a337-49ce-99dd-d18acdad4de4",
          "name": "Register API Client",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api-clients",
                ""
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "23ac340a-b40e-4aab-9175-fa6c391569ee",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n   \"clientName\": \"Enitan\",\n   \"clientEmail\": \"onagoruwaenitanesther@gmail.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f1e4db88-55cd-4c9e-9a55-97ae4898da9c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "63dc2199-e9e4-4268-b7da-0eb00b5908fd",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "82e069e5-d357-4667-9c15-f60078295428"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "5c01ef58-4498-4397-a0e8-aba3426dd84a",
          "timestamp": 1741780668234,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "23abdff6-2f91-4a7d-9a76-35a0feaabfa4",
          "name": "Get API Status",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "status"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "68a052af-18d8-4319-9db3-32e9f4b6fcaa",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1b77397b-54da-4a43-8d6e-fa690102dd9a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Verify the status code is 200\r",
                  "//pm.test(\"Status code is 200\", function () {\r",
                  "   // pm.response.to.have.status(200);\r",
                  "//});\r",
                  "\r",
                  "// Test 2: Verify the response time is less than 200ms\r",
                  "//pm.test(\"Response time is less than 200ms\", function () {\r",
                  "   // pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "//});\r",
                  "\r",
                  "// Test 3: Verify the response body is not empty\r",
                  "//pm.test(\"Response body is not empty\", function () {\r",
                  "   // pm.expect(pm.response.text()).not.to.be.empty;\r",
                  "//});\r",
                  "\r",
                  "// Test 4: Verify the response includes a 'status' property\r",
                  "//pm.test(\"Response includes 'status' property\", function () {\r",
                  "   // pm.expect(pm.response.json()).to.have.property('status');\r",
                  "//});\r",
                  "\r",
                  "// Test 5: Verify the response 'status' property is a string\r",
                  "//pm.test(\"Response 'status' property is a string\", function () {\r",
                  "   // pm.expect(pm.response.json().status).to.be.a('string');\r",
                  "//});\r",
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "548f7333-7689-4756-907c-ec10eee7b2f7",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2b223852-9433-412a-ade7-376c1ce21e36"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:120:26)",
          "checksum": "e4e09b534483abb22008f0ea70abb5aa",
          "id": "ff6f60c3-2f70-49ce-b09f-564087bc7b43",
          "timestamp": 1741780668328,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 120,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c8753c7c-301a-43c8-8277-746b820284c7",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "index.php"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [
                {
                  "key": "",
                  "value": ""
                },
                {
                  "key": "",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "747562b0-09d6-4602-b9d0-6c5502e74b29",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "834422fe-6925-4033-80b0-1f766bcec2b9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//pm.collectionVariables.get(\"variable_key\");\r",
                  "//pm.collectionVariables.get(\"variable_key\");"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "86f202c5-6cd9-475d-a554-662f37908b20",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3dd67a92-3c1e-4abd-bc4f-f215e7155846"
        }
      }
    ],
    "error": null
  }
}